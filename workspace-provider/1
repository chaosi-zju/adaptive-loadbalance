package com.aliware.tianchi;

import com.google.common.util.concurrent.*;
import org.apache.dubbo.rpc.listener.CallbackListener;
import org.apache.dubbo.rpc.service.CallbackService;

import java.util.Date;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;

/**
 * @author daofeng.xjf
 * <p>
 * 服务端回调服务
 * 可选接口
 * 用户可以基于此服务，实现服务端向客户端动态推送的功能
 */
public class CallbackServiceImpl implements CallbackService {
    ListeningExecutorService service = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
    ListenableFuture<String> future = null;
    public CallbackServiceImpl() {
        Futures.addCallback(future, new FutureCallback<Integer>() {
            public void onSuccess(Integer result) {
                System.out.println("计算结果:" + result);a
            }
            public void onFailure(Throwable throwable) {
                System.out.println("异步处理失败,e="+ throwable);
            }
        });



    }

    private Timer timer = new Timer();

    /**
     * key: listener type
     * value: callback listener
     */
    private final Map<String, CallbackListener> listeners = new ConcurrentHashMap<>();

    @Override
    public void addListener(String key, CallbackListener listener) {

       future= service.submit(new Callable<String>() {
            public String call() throws Exception {
                System.out.println("执行耗时操作...");
                String v=listener.receiveServerMsg(new Date().toString());
                return listener.receiveServerMsg(new Date().toString());;
            }
        });
/*        listeners.put(key, listener);
        listener.receiveServerMsg(new Date().toString()); // send notification for change*/


    }
}
Map<String, ProtocolConfig> map = ConfigManager.getInstance().getProtocols();
      if(null!=map && map.size()>0){
            TestServerFilter.setPoolSize(map.values().iterator().next().getThreads());
            System.out.println(map.values().iterator().next().getThreads());
      }